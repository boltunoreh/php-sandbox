<?php

use VI\Utilities\VIStatistics;

require 'VIStatistics.php';

//while ($line = trim(fgets(STDIN))) {
//    $numbers = explode(' ', $line);
//}
$numbers = [
    "10",
    "20",
];

$i = strlen($numbers[0]) < strlen($numbers[1]);
$rA = strrev($numbers[(int) $i]);
$rB = strrev($numbers[(int) !$i]);
$rTotal = '';

$next = 0;
foreach (str_split($rA) as $key => $numberA) {
    $numberB = $rB[$key] ?? 0;

    $sum = (string) ($numberA + $numberB + $next);

    $next = 0;
    if ($sum > 9) {
        $next = $sum[0];
        $sum = $sum[1];
    }

    $rTotal .= $sum;
}

if ($next > 0) {
    $rTotal .= $next;
}

echo strrev($rTotal);
die;

VIStatistics::stopTimer('strrev');
VIStatistics::stopMemoryUsage('strrev');
echo 'Time: ' . json_encode(VIStatistics::getTotal(VIStatistics::TYPE_TIME)) . PHP_EOL;
echo 'Memory: ' . json_encode(VIStatistics::getTotal(VIStatistics::TYPE_MEMORY_USAGE)) . PHP_EOL;
print formatBytes(memory_get_peak_usage());
die;

function formatBytes($bytes, $precision = 2) {
    $units = array("b", "kb", "mb", "gb", "tb");

    $bytes = max($bytes, 0);
    $pow = floor(($bytes ? log($bytes) : 0) / log(1024));
    $pow = min($pow, count($units) - 1);

    $bytes /= (1 << (10 * $pow));

    return round($bytes, $precision) . " " . $units[$pow];
}


